{"version":3,"file":"provider.js","sourceRoot":"","sources":["../../src/providers/provider.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC","sourcesContent":["import { z } from 'zod';\nimport type { ModelInfo } from './types';\n\n// Base message types\nexport type MessageRole = 'user' | 'assistant' | 'system';\n\nexport type TextContent = string;\n\nexport interface MultiModalContent {\n  type: 'text' | 'image';\n  text?: string;\n  url?: string;\n  mimeType?: string;\n}\n\nexport interface Message {\n  role: MessageRole;\n  content: TextContent | MultiModalContent[];\n}\n\n// Tool types\nexport interface Tool {\n  name: string;\n  description: string;\n  parameters: z.ZodSchema;\n}\n\nexport interface ToolCall {\n  id: string;\n  name: string;\n  arguments: unknown;\n}\n\n// Request types\nexport interface ChatRequest {\n  messages: Message[];\n  model?: string;\n  temperature?: number;\n  maxTokens?: number;\n  stream?: boolean;\n  schema?: z.ZodSchema;\n  tools?: Tool[];\n  toolChoice?: 'auto' | 'required' | 'none' | { name: string };\n}\n\n// Response types\nexport interface Usage {\n  inputTokens: number;\n  outputTokens: number;\n  totalTokens: number;\n}\n\nexport interface ChatResponse<T = string> {\n  content: T;\n  usage: Usage;\n  model: string;\n  finishReason?: 'stop' | 'length' | 'tool_calls' | 'content_filter';\n  toolCalls?: ToolCall[];\n}\n\n// Streaming types\nexport interface StreamingResponse<T = string> {\n  [Symbol.asyncIterator](): AsyncIterator<T>;\n  complete(): Promise<ChatResponse<T>>;\n}\n\n// Provider capabilities\nexport interface ProviderCapabilities {\n  streaming: boolean;\n  tools: boolean;\n  structuredOutput: boolean;\n  vision: boolean;\n  maxTokens: number;\n}\n\n// Main provider interface\nexport interface Provider {\n  readonly name: string;\n  readonly capabilities: ProviderCapabilities;\n\n  chat<T = string>(request: ChatRequest): Promise<ChatResponse<T>>;\n  stream<T = string>(request: ChatRequest): Promise<StreamingResponse<T>>;\n  supportsFeature(feature: string): boolean;\n  listModels(): Promise<ModelInfo[]>;\n}\n"]}