{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../src/retry/errors.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,MAAM,OAAO,QAAS,SAAQ,KAAK;IAQjC,YAAY,OAAe,EAAE,UAAmB,EAAE,QAAiB,EAAE,KAAc;QACjF,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,4DAA4D;QAC5D,IAAI,UAAU,EAAE,CAAC;YACf,IAAI,CAAC,WAAW,GAAG,qBAAqB,CAAC,UAAU,CAAC,CAAC;QACvD,CAAC;IACH,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,aAAc,SAAQ,QAAQ;IAIzC,YAAY,OAAe,EAAE,QAAgB,EAAE,KAAc,EAAE,OAAgB;QAC7E,KAAK,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC;QAC5B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,YAAa,SAAQ,KAAK;IAGrC,YAAY,OAAe;QACzB,KAAK,CAAC,OAAO,CAAC,CAAC;QAHD,gBAAW,GAAG,IAAI,CAAC;QAIjC,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC;IAC7B,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,cAAe,SAAQ,QAAQ;IAG1C,YAAY,OAAe,EAAE,UAAkB;QAC7C,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QAHG,gBAAW,GAAG,IAAI,CAAC;QAI1C,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;CACF;AAED;;GAEG;AACH,SAAS,qBAAqB,CAAC,UAAkB;IAC/C,gBAAgB;IAChB,IAAI,UAAU,KAAK,GAAG;QAAE,OAAO,IAAI,CAAC;IAEpC,gBAAgB;IAChB,IAAI,UAAU,IAAI,GAAG,IAAI,UAAU,GAAG,GAAG;QAAE,OAAO,IAAI,CAAC;IAEvD,uCAAuC;IACvC,IAAI,UAAU,KAAK,GAAG;QAAE,OAAO,IAAI,CAAC;IAEpC,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,gBAAgB,CAC9B,KAAY,EACZ,gBAA4C;IAE5C,oCAAoC;IACpC,IAAI,gBAAgB,EAAE,CAAC;QACrB,OAAO,gBAAgB,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAED,sCAAsC;IACtC,IAAI,aAAa,IAAI,KAAK,IAAI,OAAO,KAAK,CAAC,WAAW,KAAK,SAAS,EAAE,CAAC;QACrE,OAAO,KAAK,CAAC,WAAW,CAAC;IAC3B,CAAC;IAED,6CAA6C;IAC7C,IAAI,KAAK,YAAY,QAAQ,IAAI,KAAK,CAAC,UAAU,EAAE,CAAC;QAClD,OAAO,qBAAqB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IACjD,CAAC;IAED,wCAAwC;IACxC,MAAM,QAAQ,GAAG,KAAY,CAAC;IAE9B,yBAAyB;IACzB,IAAI,QAAQ,CAAC,MAAM,IAAI,OAAO,QAAQ,CAAC,MAAM,KAAK,QAAQ,EAAE,CAAC;QAC3D,OAAO,qBAAqB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC;IAED,sCAAsC;IACtC,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;IAC5C,MAAM,aAAa,GAAG;QACpB,YAAY;QACZ,WAAW;QACX,cAAc;QACd,WAAW;QACX,QAAQ;QACR,SAAS;QACT,SAAS;KACV,CAAC;IAEF,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;QACvD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,iCAAiC;IACjC,IAAI,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE,CAAC;QAC9E,OAAO,IAAI,CAAC;IACd,CAAC;IAED,2BAA2B;IAC3B,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["/**\n * Base error class for LLM-related errors\n */\nexport class LLMError extends Error {\n  public statusCode?: number;\n  public provider?: string;\n  public model?: string;\n  public originalError?: Error;\n  public isRetryable?: boolean;\n  public retryAfter?: number;\n\n  constructor(message: string, statusCode?: number, provider?: string, model?: string) {\n    super(message);\n    this.name = 'LLMError';\n    this.statusCode = statusCode;\n    this.provider = provider;\n    this.model = model;\n\n    // Automatically determine if retryable based on status code\n    if (statusCode) {\n      this.isRetryable = isRetryableStatusCode(statusCode);\n    }\n  }\n}\n\n/**\n * Provider-specific error with additional context\n */\nexport class ProviderError extends LLMError {\n  public attempt?: number;\n  public context?: Record<string, any>;\n\n  constructor(message: string, provider: string, model?: string, attempt?: number) {\n    super(message, undefined, provider, model);\n    this.name = 'ProviderError';\n    this.attempt = attempt;\n  }\n}\n\n/**\n * Network-related errors (always retryable)\n */\nexport class NetworkError extends Error {\n  public readonly isRetryable = true;\n\n  constructor(message: string) {\n    super(message);\n    this.name = 'NetworkError';\n  }\n}\n\n/**\n * Rate limit error with retry-after information\n */\nexport class RateLimitError extends LLMError {\n  public override readonly isRetryable = true;\n\n  constructor(message: string, retryAfter: number) {\n    super(message, 429);\n    this.name = 'RateLimitError';\n    this.retryAfter = retryAfter;\n  }\n}\n\n/**\n * Check if a status code indicates a retryable error\n */\nfunction isRetryableStatusCode(statusCode: number): boolean {\n  // Rate limiting\n  if (statusCode === 429) return true;\n\n  // Server errors\n  if (statusCode >= 500 && statusCode < 600) return true;\n\n  // Anthropic-specific overloaded status\n  if (statusCode === 529) return true;\n\n  return false;\n}\n\n/**\n * Check if an error is retryable\n */\nexport function isRetryableError(\n  error: Error,\n  customClassifier?: (error: Error) => boolean,\n): boolean {\n  // Use custom classifier if provided\n  if (customClassifier) {\n    return customClassifier(error);\n  }\n\n  // Check explicit isRetryable property\n  if ('isRetryable' in error && typeof error.isRetryable === 'boolean') {\n    return error.isRetryable;\n  }\n\n  // Check if it's an LLMError with status code\n  if (error instanceof LLMError && error.statusCode) {\n    return isRetryableStatusCode(error.statusCode);\n  }\n\n  // Check provider-specific error formats\n  const errorAny = error as any;\n\n  // OpenAI/Anthropic style\n  if (errorAny.status && typeof errorAny.status === 'number') {\n    return isRetryableStatusCode(errorAny.status);\n  }\n\n  // Check for network errors by message\n  const message = error.message.toUpperCase();\n  const networkErrors = [\n    'ECONNRESET',\n    'ETIMEDOUT',\n    'ECONNREFUSED',\n    'ENOTFOUND',\n    'SOCKET',\n    'TIMEOUT',\n    'NETWORK',\n  ];\n\n  if (networkErrors.some((err) => message.includes(err))) {\n    return true;\n  }\n\n  // Gemini-specific error messages\n  if (message.includes('RESOURCE_EXHAUSTED') || message.includes('UNAVAILABLE')) {\n    return true;\n  }\n\n  // Default to non-retryable\n  return false;\n}\n"]}